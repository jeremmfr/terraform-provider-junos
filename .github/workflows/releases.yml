name: Release
on:
  push:
    tags:
      - "v*"
jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      id: ${{steps.create_release.outputs.id}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set env RELEASE_VERSION
        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF} | cut -d'/' -f3)" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: ${{ env.RELEASE_VERSION }}
          draft: true
          prerelease: false

  assets:
    name: Push assets for ${{ matrix.goos }}/${{ matrix.goarch }}
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel multiple OS/ARCH
        goos: [linux, windows, darwin, freebsd]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19.2
          check-latest: true
        id: go
      - name: Show version
        run: go version
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set env
        run: |
          echo "CGO_ENABLED=0" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$(echo ${GITHUB_REF} | cut -d'/' -f3 | sed 's/^v//')" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)" >> $GITHUB_ENV
          echo "GOOS=$(echo ${{ matrix.goos }})" >> $GITHUB_ENV
          echo "GOARCH=$(echo ${{ matrix.goarch }})" >> $GITHUB_ENV
      - name: Setup aarch64 for arm64
        run: |
          if [[ "${{ matrix.goarch }}" == "arm64" ]] ; then
            sudo apt update
            sudo apt install -y gcc-aarch64-linux-gnu
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi
      - name: Build
        run: go build -o ${REPO_NAME}_v${RELEASE_VERSION}
      - name: Rename binary for windows
        run: |
          if [[ "${{ matrix.goos }}" == "windows" ]] ; then
            mv ${REPO_NAME}_v${RELEASE_VERSION} ${REPO_NAME}_v${RELEASE_VERSION}.exe
          fi
      - name: Install zip utils
        run: |
          sudo apt update
          sudo apt install -y zip
      - name: Create archive zip
        run: zip ${REPO_NAME}_${RELEASE_VERSION}_${{ matrix.goos }}_${{ matrix.goarch }}.zip ${REPO_NAME}_v${RELEASE_VERSION}*
      - name: Upload archive zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{ env.REPO_NAME }}_${{ env.RELEASE_VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          asset_name: ${{ env.REPO_NAME }}_${{ env.RELEASE_VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          asset_content_type: application/zip

  shasum_zip:
    name: Create sha256 sum for each zip
    needs: [release,assets]
    runs-on: ubuntu-latest
    steps:
      - name: Install utils
        run: |
          sudo apt update
          sudo apt install -y jq libdigest-sha-perl
      - name: Set env
        run: |
          echo "RELEASE_VERSION=$(echo ${GITHUB_REF} | cut -d'/' -f3 | sed 's/^v//')" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)" >> $GITHUB_ENV
          echo "USER_NAME=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f1)" >> $GITHUB_ENV
      - name: Download zip
        run: |
          for asset in $(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ env.USER_NAME }}/${{ env.REPO_NAME }}/releases/${{ needs.release.outputs.id }} | \
            jq -r '.assets[] | .url+","+.name')
          do
            asset_url=$(echo ${asset} | cut -d',' -f1)
            asset_name=$(echo ${asset} | cut -d',' -f2)
            curl -J -L -H "Accept: application/octet-stream" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            ${asset_url} -o ${asset_name}
          done
      - name: List files
        run: ls -la
      - name: Generate SHA256SUMS
        run: shasum -a 256 ${{ env.REPO_NAME }}_${{ env.RELEASE_VERSION }}_*.zip > ${{ env.REPO_NAME }}_${{ env.RELEASE_VERSION }}_SHA256SUMS
      - name: Upload shasum result
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{ env.REPO_NAME }}_${{ env.RELEASE_VERSION }}_SHA256SUMS
          asset_name: ${{ env.REPO_NAME }}_${{ env.RELEASE_VERSION }}_SHA256SUMS
          asset_content_type: application/octet-stream
