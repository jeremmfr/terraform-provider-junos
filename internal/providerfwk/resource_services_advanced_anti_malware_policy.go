package providerfwk

import (
	"context"
	"errors"
	"regexp"
	"strings"

	"github.com/jeremmfr/terraform-provider-junos/internal/junos"
	"github.com/jeremmfr/terraform-provider-junos/internal/tfdata"
	"github.com/jeremmfr/terraform-provider-junos/internal/tfdiag"
	"github.com/jeremmfr/terraform-provider-junos/internal/tfvalidator"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	balt "github.com/jeremmfr/go-utils/basicalter"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ resource.Resource                   = &servicesAdvancedAntiMalwarePolicy{}
	_ resource.ResourceWithConfigure      = &servicesAdvancedAntiMalwarePolicy{}
	_ resource.ResourceWithValidateConfig = &servicesAdvancedAntiMalwarePolicy{}
	_ resource.ResourceWithImportState    = &servicesAdvancedAntiMalwarePolicy{}
)

type servicesAdvancedAntiMalwarePolicy struct {
	client *junos.Client
}

func newServicesAdvancedAntiMalwarePolicyResource() resource.Resource {
	return &servicesAdvancedAntiMalwarePolicy{}
}

func (rsc *servicesAdvancedAntiMalwarePolicy) typeName() string {
	return providerName + "_services_advanced_anti_malware_policy"
}

func (rsc *servicesAdvancedAntiMalwarePolicy) junosName() string {
	return "services advanced-anti-malware policy"
}

func (rsc *servicesAdvancedAntiMalwarePolicy) junosClient() *junos.Client {
	return rsc.client
}

func (rsc *servicesAdvancedAntiMalwarePolicy) Metadata(
	_ context.Context, _ resource.MetadataRequest, resp *resource.MetadataResponse,
) {
	resp.TypeName = rsc.typeName()
}

func (rsc *servicesAdvancedAntiMalwarePolicy) Configure(
	ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse,
) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}
	client, ok := req.ProviderData.(*junos.Client)
	if !ok {
		unexpectedResourceConfigureType(ctx, req, resp)

		return
	}
	rsc.client = client
}

func (rsc *servicesAdvancedAntiMalwarePolicy) Schema(
	_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse,
) {
	resp.Schema = schema.Schema{
		Description: defaultResourceSchemaDescription(rsc),
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "An identifier for the resource with format `<name>`.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: "Advanced Anti-malware policy name.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 63),
					tfvalidator.StringDoubleQuoteExclusion(),
				},
			},
			"blacklist_notification_log": schema.BoolAttribute{
				Optional:    true,
				Description: "Logging option for Advanced Anti-malware blacklist hit.",
				Validators: []validator.Bool{
					tfvalidator.BoolTrue(),
				},
			},
			"default_notification_log": schema.BoolAttribute{
				Optional:    true,
				Description: "Logging option for Advanced Anti-malware action.",
				Validators: []validator.Bool{
					tfvalidator.BoolTrue(),
				},
			},
			"fallback_options_action": schema.StringAttribute{
				Optional:    true,
				Description: "Notification action taken for fallback action.",
				Validators: []validator.String{
					stringvalidator.OneOf("block", "permit"),
				},
			},
			"fallback_options_notification_log": schema.BoolAttribute{
				Optional:    true,
				Description: "Logging option for Advanced Anti-malware fallback action.",
				Validators: []validator.Bool{
					tfvalidator.BoolTrue(),
				},
			},
			"http_action": schema.StringAttribute{
				Optional:    true,
				Description: "Action taken for contents with verdict meet threshold for HTTP.",
				Validators: []validator.String{
					stringvalidator.OneOf("block", "permit"),
				},
			},
			"http_client_notify_file": schema.StringAttribute{
				Optional: true,
				Description: "File name for http response to client notification action taken for" +
					" contents with verdict meet threshold.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 255),
					tfvalidator.StringDoubleQuoteExclusion(),
				},
			},
			"http_client_notify_message": schema.StringAttribute{
				Optional:    true,
				Description: "Block message to client notification action taken for contents with verdict meet threshold.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 1023),
					tfvalidator.StringDoubleQuoteExclusion(),
				},
			},
			"http_client_notify_redirect_url": schema.StringAttribute{
				Optional:    true,
				Description: "Redirect url to client notification action taken for contents with verdict meet threshold.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 1023),
					tfvalidator.StringDoubleQuoteExclusion(),
					stringvalidator.RegexMatches(regexp.MustCompile(
						`^https?:\/\/.+$`),
						"URL must begin with http:// or https://"),
				},
			},
			"http_file_verdict_unknown": schema.StringAttribute{
				Optional:    true,
				Description: "Action taken for contents with verdict unknown.",
				Validators: []validator.String{
					stringvalidator.OneOf("block", "permit"),
				},
			},
			"http_inspection_profile": schema.StringAttribute{
				Optional:    true,
				Description: "Advanced Anti-malware inspection-profile name for HTTP.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 63),
					tfvalidator.StringDoubleQuoteExclusion(),
				},
			},
			"http_notification_log": schema.BoolAttribute{
				Optional:    true,
				Description: "Logging option for Advanced Anti-malware actions for HTTP.",
				Validators: []validator.Bool{
					tfvalidator.BoolTrue(),
				},
			},
			"imap_inspection_profile": schema.StringAttribute{
				Optional:    true,
				Description: "Advanced Anti-malware inspection-profile name for IMAP.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 63),
					tfvalidator.StringDoubleQuoteExclusion(),
				},
			},
			"imap_notification_log": schema.BoolAttribute{
				Optional:    true,
				Description: "Logging option for Advanced Anti-malware actions for IMAP.",
				Validators: []validator.Bool{
					tfvalidator.BoolTrue(),
				},
			},
			"smtp_inspection_profile": schema.StringAttribute{
				Optional:    true,
				Description: "Advanced Anti-malware inspection-profile name for SMTP.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 63),
					tfvalidator.StringDoubleQuoteExclusion(),
				},
			},
			"smtp_notification_log": schema.BoolAttribute{
				Optional:    true,
				Description: "Logging option for Advanced Anti-malware actions for SMTP.",
				Validators: []validator.Bool{
					tfvalidator.BoolTrue(),
				},
			},
			"verdict_threshold": schema.StringAttribute{
				Optional:    true,
				Description: "Verdict threshold.",
				Validators: []validator.String{
					stringvalidator.OneOf("recommended", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"),
				},
			},
			"whitelist_notification_log": schema.BoolAttribute{
				Optional:    true,
				Description: "Logging option for Advanced Anti-malware whitelist hit.",
				Validators: []validator.Bool{
					tfvalidator.BoolTrue(),
				},
			},
		},
	}
}

type servicesAdvancedAntiMalwarePolicyData struct {
	ID                             types.String `tfsdk:"id"                                tfdata:"skip_isempty"`
	Name                           types.String `tfsdk:"name"                              tfdata:"skip_isempty"`
	BlacklistNotificationLog       types.Bool   `tfsdk:"blacklist_notification_log"`
	DefaultNotificationLog         types.Bool   `tfsdk:"default_notification_log"`
	FallbackOptionsAction          types.String `tfsdk:"fallback_options_action"`
	FallbackOptionsNotificationLog types.Bool   `tfsdk:"fallback_options_notification_log"`
	HTTPAction                     types.String `tfsdk:"http_action"`
	HTTPClientNotifyFile           types.String `tfsdk:"http_client_notify_file"`
	HTTPClientNotifyMessage        types.String `tfsdk:"http_client_notify_message"`
	HTTPClientNotifyRedirectURL    types.String `tfsdk:"http_client_notify_redirect_url"`
	HTTPFileVerdictUnknown         types.String `tfsdk:"http_file_verdict_unknown"`
	HTTPInspectionProfile          types.String `tfsdk:"http_inspection_profile"`
	HTTPNotificationLog            types.Bool   `tfsdk:"http_notification_log"`
	ImapInspectionProfile          types.String `tfsdk:"imap_inspection_profile"`
	ImapNotificationLog            types.Bool   `tfsdk:"imap_notification_log"`
	SMTPInspectionProfile          types.String `tfsdk:"smtp_inspection_profile"`
	SMTPNotificationLog            types.Bool   `tfsdk:"smtp_notification_log"`
	VerdictThreshold               types.String `tfsdk:"verdict_threshold"`
	WhitelistNotificationLog       types.Bool   `tfsdk:"whitelist_notification_log"`
}

func (rscData *servicesAdvancedAntiMalwarePolicyData) isEmpty() bool {
	return tfdata.CheckBlockIsEmpty(rscData)
}

func (rsc *servicesAdvancedAntiMalwarePolicy) ValidateConfig(
	ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse,
) {
	var config servicesAdvancedAntiMalwarePolicyData
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if config.isEmpty() {
		resp.Diagnostics.AddAttributeError(
			path.Root("name"),
			tfdiag.MissingConfigErrSummary,
			"at least one of arguments need to be set (in addition to `name`)",
		)
	}

	if !config.HTTPAction.IsNull() &&
		!config.HTTPAction.IsUnknown() &&
		config.HTTPInspectionProfile.IsNull() {
		resp.Diagnostics.AddAttributeError(
			path.Root("http_action"),
			tfdiag.MissingConfigErrSummary,
			"http_inspection_profile must be specified with http_action",
		)
	}
	if !config.HTTPInspectionProfile.IsNull() &&
		!config.HTTPInspectionProfile.IsUnknown() &&
		config.HTTPAction.IsNull() {
		resp.Diagnostics.AddAttributeError(
			path.Root("http_inspection_profile"),
			tfdiag.MissingConfigErrSummary,
			"http_action must be specified with http_inspection_profile",
		)
	}
	if !config.HTTPClientNotifyFile.IsNull() &&
		!config.HTTPClientNotifyFile.IsUnknown() {
		if config.HTTPAction.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_file"),
				tfdiag.MissingConfigErrSummary,
				"http_action must be specified with http_client_notify_file",
			)
		}
		if !config.HTTPClientNotifyMessage.IsNull() &&
			!config.HTTPClientNotifyMessage.IsUnknown() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_file"),
				tfdiag.ConflictConfigErrSummary,
				"http_client_notify_file and http_client_notify_message cannot be configured together",
			)
		}
		if !config.HTTPClientNotifyRedirectURL.IsNull() &&
			!config.HTTPClientNotifyRedirectURL.IsUnknown() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_file"),
				tfdiag.ConflictConfigErrSummary,
				"http_client_notify_file and http_client_notify_redirect_url cannot be configured together",
			)
		}
		if config.HTTPInspectionProfile.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_file"),
				tfdiag.MissingConfigErrSummary,
				"http_inspection_profile must be specified with http_client_notify_file",
			)
		}
	}
	if !config.HTTPClientNotifyMessage.IsNull() &&
		!config.HTTPClientNotifyMessage.IsUnknown() {
		if config.HTTPAction.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_message"),
				tfdiag.MissingConfigErrSummary,
				"http_action must be specified with http_client_notify_message",
			)
		}
		if !config.HTTPClientNotifyRedirectURL.IsNull() &&
			!config.HTTPClientNotifyRedirectURL.IsUnknown() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_message"),
				tfdiag.ConflictConfigErrSummary,
				"http_client_notify_message and http_client_notify_redirect_url cannot be configured together",
			)
		}
		if config.HTTPInspectionProfile.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_message"),
				tfdiag.MissingConfigErrSummary,
				"http_inspection_profile must be specified with http_client_notify_message",
			)
		}
	}
	if !config.HTTPClientNotifyRedirectURL.IsNull() &&
		!config.HTTPClientNotifyRedirectURL.IsUnknown() {
		if config.HTTPAction.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_redirect_url"),
				tfdiag.MissingConfigErrSummary,
				"http_action must be specified with http_client_notify_redirect_url",
			)
		}
		if config.HTTPInspectionProfile.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_client_notify_redirect_url"),
				tfdiag.MissingConfigErrSummary,
				"http_inspection_profile must be specified with http_client_notify_redirect_url",
			)
		}
	}
	if !config.HTTPFileVerdictUnknown.IsNull() &&
		!config.HTTPFileVerdictUnknown.IsUnknown() {
		if config.HTTPAction.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_file_verdict_unknown"),
				tfdiag.MissingConfigErrSummary,
				"http_action must be specified with http_file_verdict_unknown",
			)
		}
		if config.HTTPInspectionProfile.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_file_verdict_unknown"),
				tfdiag.MissingConfigErrSummary,
				"http_inspection_profile must be specified with http_file_verdict_unknown",
			)
		}
	}
	if !config.HTTPNotificationLog.IsNull() &&
		!config.HTTPNotificationLog.IsUnknown() {
		if config.HTTPAction.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_notification_log"),
				tfdiag.MissingConfigErrSummary,
				"http_action must be specified with http_notification_log",
			)
		}
		if config.HTTPInspectionProfile.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("http_notification_log"),
				tfdiag.MissingConfigErrSummary,
				"http_inspection_profile must be specified with http_notification_log",
			)
		}
	}
	if !config.ImapNotificationLog.IsNull() &&
		!config.ImapNotificationLog.IsUnknown() {
		if config.ImapInspectionProfile.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("imap_notification_log"),
				tfdiag.MissingConfigErrSummary,
				"imap_inspection_profile must be specified with imap_notification_log",
			)
		}
	}
	if !config.SMTPNotificationLog.IsNull() &&
		!config.SMTPNotificationLog.IsUnknown() {
		if config.SMTPInspectionProfile.IsNull() {
			resp.Diagnostics.AddAttributeError(
				path.Root("smtp_notification_log"),
				tfdiag.MissingConfigErrSummary,
				"smtp_inspection_profile must be specified with smtp_notification_log",
			)
		}
	}
}

func (rsc *servicesAdvancedAntiMalwarePolicy) Create(
	ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse,
) {
	var plan servicesAdvancedAntiMalwarePolicyData
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	if plan.Name.ValueString() == "" {
		resp.Diagnostics.AddAttributeError(
			path.Root("name"),
			"Empty Name",
			defaultResourceCouldNotCreateWithEmptyMessage(rsc, "name"),
		)

		return
	}

	defaultResourceCreate(
		ctx,
		rsc,
		func(fnCtx context.Context, junSess *junos.Session) bool {
			policyExists, err := checkServicesAdvancedAntiMalwarePolicyExists(fnCtx, plan.Name.ValueString(), junSess)
			if err != nil {
				resp.Diagnostics.AddError(tfdiag.PreCheckErrSummary, err.Error())

				return false
			}
			if policyExists {
				resp.Diagnostics.AddError(
					tfdiag.DuplicateConfigErrSummary,
					defaultResourceAlreadyExistsMessage(rsc, plan.Name),
				)

				return false
			}

			return true
		},
		func(fnCtx context.Context, junSess *junos.Session) bool {
			policyExists, err := checkServicesAdvancedAntiMalwarePolicyExists(fnCtx, plan.Name.ValueString(), junSess)
			if err != nil {
				resp.Diagnostics.AddError(tfdiag.PostCheckErrSummary, err.Error())

				return false
			}
			if !policyExists {
				resp.Diagnostics.AddError(
					tfdiag.NotFoundErrSummary,
					defaultResourceDoesNotExistsAfterCommitMessage(rsc, plan.Name),
				)

				return false
			}

			return true
		},
		&plan,
		resp,
	)
}

func (rsc *servicesAdvancedAntiMalwarePolicy) Read(
	ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse,
) {
	var state, data servicesAdvancedAntiMalwarePolicyData
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var _ resourceDataReadFrom1String = &data
	defaultResourceRead(
		ctx,
		rsc,
		[]any{
			state.Name.ValueString(),
		},
		&data,
		nil,
		resp,
	)
}

func (rsc *servicesAdvancedAntiMalwarePolicy) Update(
	ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse,
) {
	var plan, state servicesAdvancedAntiMalwarePolicyData
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	defaultResourceUpdate(
		ctx,
		rsc,
		&state,
		&plan,
		resp,
	)
}

func (rsc *servicesAdvancedAntiMalwarePolicy) Delete(
	ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse,
) {
	var state servicesAdvancedAntiMalwarePolicyData
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	defaultResourceDelete(
		ctx,
		rsc,
		&state,
		resp,
	)
}

func (rsc *servicesAdvancedAntiMalwarePolicy) ImportState(
	ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse,
) {
	var data servicesAdvancedAntiMalwarePolicyData

	var _ resourceDataReadFrom1String = &data
	defaultResourceImportState(
		ctx,
		rsc,
		&data,
		req,
		resp,
		defaultResourceImportDontFindIDStrMessage(rsc, req.ID, "name"),
	)
}

func checkServicesAdvancedAntiMalwarePolicyExists(
	_ context.Context, name string, junSess *junos.Session,
) (
	bool, error,
) {
	showConfig, err := junSess.Command(junos.CmdShowConfig +
		"services advanced-anti-malware policy \"" + name + "\"" + junos.PipeDisplaySet)
	if err != nil {
		return false, err
	}
	if showConfig == junos.EmptyW {
		return false, nil
	}

	return true, nil
}

func (rscData *servicesAdvancedAntiMalwarePolicyData) fillID() {
	rscData.ID = types.StringValue(rscData.Name.ValueString())
}

func (rscData *servicesAdvancedAntiMalwarePolicyData) nullID() bool {
	return rscData.ID.IsNull()
}

func (rscData *servicesAdvancedAntiMalwarePolicyData) set(
	_ context.Context, junSess *junos.Session,
) (
	path.Path, error,
) {
	if rscData.isEmpty() {
		return path.Root("name"),
			errors.New("at least one of arguments need to be set (in addition to `name`)")
	}

	configSet := make([]string, 0, 100)
	setPrefix := "set services advanced-anti-malware policy \"" + rscData.Name.ValueString() + "\" "

	if rscData.BlacklistNotificationLog.ValueBool() {
		configSet = append(configSet, setPrefix+"blacklist-notification log")
	}
	if rscData.DefaultNotificationLog.ValueBool() {
		configSet = append(configSet, setPrefix+"default-notification log")
	}
	if v := rscData.FallbackOptionsAction.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"fallback-options action "+v)
	}
	if rscData.FallbackOptionsNotificationLog.ValueBool() {
		configSet = append(configSet, setPrefix+"fallback-options notification log")
	}
	if v := rscData.HTTPAction.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"http action "+v)
	}
	if v := rscData.HTTPClientNotifyFile.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"http client-notify file \""+v+"\"")
	}
	if v := rscData.HTTPClientNotifyMessage.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"http client-notify message \""+v+"\"")
	}
	if v := rscData.HTTPClientNotifyRedirectURL.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"http client-notify redirect-url \""+v+"\"")
	}
	if v := rscData.HTTPFileVerdictUnknown.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"http file-verdict-unknown "+v)
	}
	if v := rscData.HTTPInspectionProfile.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"http inspection-profile \""+v+"\"")
	}
	if rscData.HTTPNotificationLog.ValueBool() {
		configSet = append(configSet, setPrefix+"http notification log")
	}
	if v := rscData.ImapInspectionProfile.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"imap inspection-profile \""+v+"\"")
	}
	if rscData.ImapNotificationLog.ValueBool() {
		configSet = append(configSet, setPrefix+"imap notification log")
	}
	if v := rscData.SMTPInspectionProfile.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"smtp inspection-profile \""+v+"\"")
	}
	if rscData.SMTPNotificationLog.ValueBool() {
		configSet = append(configSet, setPrefix+"smtp notification log")
	}
	if v := rscData.VerdictThreshold.ValueString(); v != "" {
		configSet = append(configSet, setPrefix+"verdict-threshold "+v)
	}
	if rscData.WhitelistNotificationLog.ValueBool() {
		configSet = append(configSet, setPrefix+"whitelist-notification log")
	}

	return path.Empty(), junSess.ConfigSet(configSet)
}

func (rscData *servicesAdvancedAntiMalwarePolicyData) read(
	_ context.Context, name string, junSess *junos.Session,
) error {
	showConfig, err := junSess.Command(junos.CmdShowConfig +
		"services advanced-anti-malware policy \"" + name + "\"" + junos.PipeDisplaySetRelative)
	if err != nil {
		return err
	}
	if showConfig != junos.EmptyW {
		rscData.Name = types.StringValue(name)
		rscData.fillID()
		for _, item := range strings.Split(showConfig, "\n") {
			if strings.Contains(item, junos.XMLStartTagConfigOut) {
				continue
			}
			if strings.Contains(item, junos.XMLEndTagConfigOut) {
				break
			}
			itemTrim := strings.TrimPrefix(item, junos.SetLS)
			switch {
			case itemTrim == "blacklist-notification log":
				rscData.BlacklistNotificationLog = types.BoolValue(true)
			case itemTrim == "default-notification log":
				rscData.DefaultNotificationLog = types.BoolValue(true)
			case balt.CutPrefixInString(&itemTrim, "fallback-options action "):
				rscData.FallbackOptionsAction = types.StringValue(itemTrim)
			case itemTrim == "fallback-options notification log":
				rscData.FallbackOptionsNotificationLog = types.BoolValue(true)
			case balt.CutPrefixInString(&itemTrim, "http action "):
				rscData.HTTPAction = types.StringValue(itemTrim)
			case balt.CutPrefixInString(&itemTrim, "http client-notify file "):
				rscData.HTTPClientNotifyFile = types.StringValue(strings.Trim(itemTrim, "\""))
			case balt.CutPrefixInString(&itemTrim, "http client-notify message "):
				rscData.HTTPClientNotifyMessage = types.StringValue(strings.Trim(itemTrim, "\""))
			case balt.CutPrefixInString(&itemTrim, "http client-notify redirect-url "):
				rscData.HTTPClientNotifyRedirectURL = types.StringValue(strings.Trim(itemTrim, "\""))
			case balt.CutPrefixInString(&itemTrim, "http file-verdict-unknown "):
				rscData.HTTPFileVerdictUnknown = types.StringValue(itemTrim)
			case balt.CutPrefixInString(&itemTrim, "http inspection-profile "):
				rscData.HTTPInspectionProfile = types.StringValue(strings.Trim(itemTrim, "\""))
			case itemTrim == "http notification log":
				rscData.HTTPNotificationLog = types.BoolValue(true)
			case balt.CutPrefixInString(&itemTrim, "imap inspection-profile "):
				rscData.ImapInspectionProfile = types.StringValue(strings.Trim(itemTrim, "\""))
			case itemTrim == "imap notification log":
				rscData.ImapNotificationLog = types.BoolValue(true)
			case balt.CutPrefixInString(&itemTrim, "smtp inspection-profile "):
				rscData.SMTPInspectionProfile = types.StringValue(strings.Trim(itemTrim, "\""))
			case itemTrim == "smtp notification log":
				rscData.SMTPNotificationLog = types.BoolValue(true)
			case balt.CutPrefixInString(&itemTrim, "verdict-threshold "):
				rscData.VerdictThreshold = types.StringValue(itemTrim)
			case itemTrim == "whitelist-notification log":
				rscData.WhitelistNotificationLog = types.BoolValue(true)
			}
		}
	}

	return nil
}

func (rscData *servicesAdvancedAntiMalwarePolicyData) del(
	_ context.Context, junSess *junos.Session,
) error {
	configSet := []string{
		"delete services advanced-anti-malware policy \"" + rscData.Name.ValueString() + "\"",
	}

	return junSess.ConfigSet(configSet)
}
